openapi: 3.0.0
info:
  title: Exercisely API
  version: 1.0.0
  description: Backend REST API documentaion for Exercisely, a fitness application built with Angular and the Serverless Framework on AWS.
servers:
  - url: https://h216139nsh.execute-api.eu-west-1.amazonaws.com

tags:
  - name: Authentication
    description: Endpoints related to user authentication and account management
  - name: Users
    description: Endpoints for managing user profiles and settings
  - name: Exercises
    description: Endpoints for browsing and filtering exercises
  - name: Likes
    description: Endpoints for liking and unliking exercises
  - name: Comments
    description: Endpoints for posting and managing comments on exercises
  - name: Lists
    description: Endpoints for creating and managing custom exercise lists
  - name: Followers
    description: Endpoints for following users or lists

paths:
  # Authentication
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and sends an email verification code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: Password123
                name:
                  type: string
                  example: John Doe
              required:
                - email
                - password
                - name
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully. Please verify your email.
                  email:
                    type: string
                    example: user@example.com
                  username:
                    type: string
                    example: 550e8400-e29b-41d4-a716-446655440000
        '400':
          description: Bad request (e.g., invalid email or password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      description: Authenticates a user and returns authentication tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: Password123
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  idToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  expiresIn:
                    type: integer
                    example: 3600
        '400':
          description: Bad request (e.g., invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register/confirm-email:
    post:
      tags:
        - Authentication
      summary: Confirm user's email
      description: Confirms a user's email using a verification code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                code:
                  type: string
                  example: 123456
              required:
                - email
                - code
      responses:
        '200':
          description: Email confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email confirmed successfully
        '400':
          description: Bad request (e.g., invalid code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register/resend-code:
    post:
      tags:
        - Authentication
      summary: Resend email confirmation code
      description: Resends the email verification code for registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 550e8400-e29b-41d4-a716-446655440000
              required:
                - username
      responses:
        '200':
          description: Confirmation code resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Confirmation code resent successfully.
        '400':
          description: Bad request (e.g., user not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh authentication tokens
      description: Refreshes the user's access and ID tokens using a refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              required:
                - refreshToken
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  idToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  expiresIn:
                    type: integer
                    example: 3600
        '401':
          description: Unauthorized (e.g., invalid refresh token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Initiate password reset
      description: Sends a verification code to the user's email for password reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
              required:
                - email
      responses:
        '200':
          description: Verification code sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification code sent to your email.
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password/confirm:
    post:
      tags:
        - Authentication
      summary: Confirm password reset
      description: Resets the user's password using a verification code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                verificationCode:
                  type: string
                  example: 123456
                newPassword:
                  type: string
                  minLength: 8
                  example: NewPassword123
              required:
                - email
                - verificationCode
                - newPassword
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully.
        '400':
          description: Bad request (e.g., invalid code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Users
  /users/me/profile-photo-upload-url:
    get:
      tags:
        - Users
      summary: Get presigned URL for profile photo upload
      description: Returns a presigned S3 URL to upload a profile photo.
      security:
        - CognitoAuthorizer: []
      responses:
        '200':
          description: Presigned URL generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                    example: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/...
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/cover-photo-upload-url:
    get:
      tags:
        - Users
      summary: Get presigned URL for cover photo upload
      description: Returns a presigned S3 URL to upload a cover photo.
      security:
        - CognitoAuthorizer: []
      responses:
        '200':
          description: Presigned URL generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                    example: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/...
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/profile-photo:
    put:
      tags:
        - Users
      summary: Update profile photo URL
      description: Updates the user's profile photo URL after upload to S3.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoKey:
                  type: string
                  example: profile-photos/123e4567-e89b-12d3-a456-426614174000.jpg
              required:
                - photoKey
      responses:
        '200':
          description: Profile photo updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile photo updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/cover-photo:
    put:
      tags:
        - Users
      summary: Update cover photo URL
      description: Updates the user's cover photo URL after upload to S3.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoKey:
                  type: string
                  example: cover-photos/123e4567-e89b-12d3-a456-426614174000.jpg
              required:
                - photoKey
      responses:
        '200':
          description: Cover photo updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cover photo updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user's profile
      description: Retrieves the profile of the authenticated user.
      security:
        - CognitoAuthorizer: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Users
      summary: Update user profile
      description: Updates the authenticated user's name.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jane Doe
              required:
                - name
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Deletes the authenticated user's account and associated data.
      security:
        - CognitoAuthorizer: []
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a list of all users with sanitized data.
      security:
        - CognitoAuthorizer: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SanitizedUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a user's profile by their user ID.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The ID of the user
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanitizedUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/password:
    patch:
      tags:
        - Users
      summary: Update user password
      description: Changes the authenticated user's password.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  minLength: 8
                  example: OldPassword123
                newPassword:
                  type: string
                  minLength: 8
                  example: NewPassword123
              required:
                - currentPassword
                - newPassword
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
        '400':
          description: Bad request (e.g., invalid password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/email:
    patch:
      tags:
        - Users
      summary: Update user email
      description: Initiates an email update by sending a verification code.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
                  format: email
                  example: newemail@example.com
              required:
                - newEmail
      responses:
        '200':
          description: Verification code sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification code sent to new email.
        '400':
          description: Bad request (e.g., invalid email)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/email/verify:
    post:
      tags:
        - Users
      summary: Verify new email
      description: Confirms the new email address with a verification code.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
                  format: email
                  example: newemail@example.com
                verificationCode:
                  type: string
                  example: 123456
              required:
                - newEmail
                - verificationCode
      responses:
        '200':
          description: Email updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email updated successfully
        '400':
          description: Bad request (e.g., invalid code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/email/resend-code:
    post:
      tags:
        - Users
      summary: Resend email verification code
      description: Resends the verification code for email update.
      security:
        - CognitoAuthorizer: []
      responses:
        '200':
          description: Code resent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verification code resent successfully.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Exercises
  /exercises:
    get:
      tags:
        - Exercises
      summary: Get all exercises
      description: Retrieves a paginated list of exercises with optional filters.
      parameters:
        - in: query
          name: aiQuery
          schema:
            type: string
          required: false
          description: Natural language query for AI-based filtering
          example: beginner push exercises with dumbbells
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Exercise name filter
          example: bench press
        - in: query
          name: force
          schema:
            type: string
            enum: [static, pull, push]
          required: false
          description: Comma-separated list of force types
          example: push
        - in: query
          name: level
          schema:
            type: string
            enum: [beginner, intermediate, expert]
          required: false
          description: Comma-separated list of difficulty levels
          example: beginner
        - in: query
          name: mechanic
          schema:
            type: string
            enum: [isolation, compound]
          required: false
          description: Comma-separated list of mechanics
          example: compound
        - in: query
          name: equipment
          schema:
            type: string
            enum:
              - medicine ball
              - dumbbell
              - body only
              - bands
              - kettlebells
              - foam roll
              - cable
              - machine
              - barbell
              - exercise ball
              - e-z curl bar
              - other
          required: false
          description: Comma-separated list of equipment
          example: dumbbell
        - in: query
          name: muscle
          schema:
            type: string
            enum:
              - abdominals
              - abductors
              - adductors
              - biceps
              - calves
              - chest
              - forearms
              - glutes
              - hamstrings
              - lats
              - lower back
              - middle back
              - neck
              - quadriceps
              - shoulders
              - traps
              - triceps
          required: false
          description: Comma-separated list of muscle groups
          example: chest
        - in: query
          name: category
          schema:
            type: string
            enum:
              - powerlifting
              - strength
              - stretching
              - cardio
              - olympic weightlifting
              - strongman
              - plyometrics
          required: false
          description: Comma-separated list of categories
          example: strength
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          description: Number of items per page
      responses:
        '200':
          description: List of exercises
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 50
                  page:
                    type: integer
                    example: 1
                  pageSize:
                    type: integer
                    example: 20
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Exercise'
                  ai:
                    type: object
                    properties:
                      query:
                        type: string
                        example: beginner push exercises with dumbbells
                      filters:
                        type: object
                        example: { 'level': ['beginner'], 'force': ['push'], 'equipment': ['dumbbell'] }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Likes
  /likes:
    post:
      tags:
        - Likes
      summary: Like an exercise
      description: Adds a like to an exercise for the authenticated user.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exerciseId:
                  type: string
                  example: exercise123
              required:
                - exerciseId
      responses:
        '201':
          description: Like added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like added
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Likes
      summary: Unlike an exercise
      description: Removes a like from an exercise for the authenticated user.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: query
          name: exerciseId
          schema:
            type: string
          required: true
          description: The ID of the exercise to unlike
          example: exercise123
      responses:
        '200':
          description: Like removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like removed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Comments
  /comments:
    post:
      tags:
        - Comments
      summary: Create a comment
      description: Adds a comment to an exercise by the authenticated user.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exerciseId:
                  type: string
                  example: exercise123
                content:
                  type: string
                  example: Great exercise!
              required:
                - exerciseId
                - content
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Comments
      summary: Delete a comment
      description: Deletes a comment by the authenticated user.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: query
          name: commentId
          schema:
            type: string
          required: true
          description: The ID of the comment to delete
          example: comment456
      responses:
        '200':
          description: Comment deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment deleted
        '403':
          description: Forbidden (e.g., not the comment owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Comments
      summary: Get comments
      description: Retrieves comments by exercise ID or comment ID.
      parameters:
        - in: query
          name: exerciseId
          schema:
            type: string
          required: false
          description: Filter comments by exercise ID
          example: exercise123
        - in: query
          name: commentId
          schema:
            type: string
          required: false
          description: Retrieve a specific comment by ID
          example: comment456
      responses:
        '200':
          description: Comments retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CommentResponse'
                  - type: array
                    items:
                      $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request (e.g., missing parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Lists
  /lists:
    post:
      tags:
        - Lists
      summary: Create a list
      description: Creates a new exercise list for the authenticated user.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My Workout Plan
                description:
                  type: string
                  example: A plan for strength training
                exerciseId:
                  type: string
                  example: exercise123
                visibility:
                  type: string
                  enum: [public, private, shared]
                  example: public
                sharedWith:
                  type: array
                  items:
                    type: string
                  example: [user456, user789]
              required:
                - title
                - exerciseId
                - visibility
      responses:
        '201':
          description: List created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Lists
      summary: Get lists
      description: Retrieves lists relevant to or owned by the authenticated user, or public/shared lists of another user.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: false
          description: Filter lists by a specific user ID
          example: user456
      responses:
        '200':
          description: Lists retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    list:
                      $ref: '#/components/schemas/List'
                    relationship:
                      type: string
                      enum: [owned, following, shared, public]
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                        profilePhotoUrl:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Lists
      summary: Update a list
      description: Updates an existing list owned by the authenticated user.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listId:
                  type: string
                  example: list789
                title:
                  type: string
                  example: Updated Workout Plan
                description:
                  type: string
                  example: Updated description
                visibility:
                  type: string
                  enum: [public, private, shared]
                  example: shared
                sharedWith:
                  type: array
                  items:
                    type: string
                  example: [user456, user789]
              required:
                - listId
      responses:
        '200':
          description: List updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: List updated
        '403':
          description: Forbidden (e.g., not the list owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Lists
      summary: Delete a list
      description: Deletes a list owned by the authenticated user.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: query
          name: listId
          schema:
            type: string
          required: true
          description: The ID of the list to delete
          example: list789
      responses:
        '200':
          description: List deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: List deleted
        '403':
          description: Forbidden (e.g., not the list owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{listId}/exercises:
    post:
      tags:
        - Lists
      summary: Add exercise to list
      description: Adds an exercise to a list owned by the authenticated user.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: path
          name: listId
          schema:
            type: string
          required: true
          description: The ID of the list
          example: list789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exerciseId:
                  type: string
                  example: exercise123
              required:
                - exerciseId
      responses:
        '200':
          description: Exercise added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Exercise added to list
        '403':
          description: Forbidden (e.g., not the list owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Lists
      summary: Remove exercise from list
      description: Removes an exercise from a list owned by the authenticated user.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: path
          name: listId
          schema:
            type: string
          required: true
          description: The ID of the list
          example: list789
        - in: query
          name: exerciseId
          schema:
            type: string
          required: true
          description: The ID of the exercise to remove
          example: exercise123
      responses:
        '200':
          description: Exercise removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Exercise removed from list
        '403':
          description: Forbidden (e.g., not the list owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Followers
  /followers:
    post:
      tags:
        - Followers
      summary: Follow a user or list
      description: Allows the authenticated user to follow another user or a list.
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: user456
                listId:
                  type: string
                  example: list789
              oneOf:
                - required: [userId]
                - required: [listId]
      responses:
        '201':
          description: Followed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Followed successfully
        '400':
          description: Bad request (e.g., cannot follow self)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Followers
      summary: Unfollow a user or list
      description: Allows the authenticated user to unfollow a user or list.
      security:
        - CognitoAuthorizer: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: false
          description: The ID of the user to unfollow
          example: user456
        - in: query
          name: listId
          schema:
            type: string
          required: false
          description: The ID of the list to unfollow
          example: list789
      responses:
        '200':
          description: Unfollowed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unfollowed successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Followers
      summary: Get followers
      description: Retrieves followers of a user or list.
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: false
          description: Get followers of this user
          example: user456
        - in: query
          name: listId
          schema:
            type: string
          required: false
          description: Get followers of this list
          example: list789
      responses:
        '200':
          description: Followers retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  followers:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                        name:
                          type: string
                        profilePhotoUrl:
                          type: string
                  followings:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                        name:
                          type: string
                        profilePhotoUrl:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    CognitoAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      description: Bearer token from AWS Cognito

  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: user@example.com
        createdAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        followerCount:
          type: integer
          example: 10
        profilePhotoUrl:
          type: string
          example: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/profile.jpg
        coverPhotoUrl:
          type: string
          example: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/cover.jpg

    SanitizedUser:
      type: object
      properties:
        userId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: John Doe
        profilePhotoUrl:
          type: string
          example: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/profile.jpg

    Exercise:
      type: object
      properties:
        exerciseId:
          type: string
          example: exercise123
        name:
          type: string
          example: Bench Press
        force:
          type: string
          example: push
        level:
          type: string
          example: intermediate
        mechanic:
          type: string
          example: compound
        equipment:
          type: string
          example: barbell
        muscle:
          type: array
          items:
            type: string
          example: [chest, triceps]
        category:
          type: string
          example: strength
        isLiked:
          type: boolean
          example: true

    CommentResponse:
      type: object
      properties:
        commentId:
          type: string
          example: comment456
        exerciseId:
          type: string
          example: exercise123
        userId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        content:
          type: string
          example: Great exercise!
        createdAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        user:
          type: object
          properties:
            name:
              type: string
              example: John Doe
            profilePhotoUrl:
              type: string
              example: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/profile.jpg

    List:
      type: object
      properties:
        listId:
          type: string
          example: list789
        userId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        title:
          type: string
          example: My Workout Plan
        description:
          type: string
          example: A plan for strength training
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
        visibility:
          type: string
          enum: [public, private, shared]
          example: public
        sharedWith:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              name:
                type: string
              profilePhotoUrl:
                type: string
          example:
            - userId: user456
              name: Jane Doe
              profilePhotoUrl: https://exercisely-dev-images.s3.eu-west-1.amazonaws.com/jane.jpg
        createdAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        followerCount:
          type: integer
          example: 5

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: An error occurred
        code:
          type: string
          example: BAD_REQUEST
